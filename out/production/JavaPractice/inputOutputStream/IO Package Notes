A communication channel needed to transfer data
			(communication channel)		
Source------------------------------>destination

Two types of channel can be established

Byte-----for reading and writing byte data
Character----for reading and writing character data


		Byte data (FileInputStream class)               (FileOutputStream class)
Source-------------------------------------->JAVA---------------------------------------->Destination
        reading purpose we need to establish      writing purpose we need to
        Byte channel using above class            establish Byte channel using above class


		Character data (FileReader class)             (FileWriter class)
Source-------------------------------------->JAVA---------------------------------------->Destination
        reading purpose we need to establish           writing purpose we need to
        Character channel using above class            establish character channel using above class

        
Method used for reading : read()
Method used for writing : write()        
int void read() method returns first character unicode of the text present in the file ,returns return type int
write(int)---pass that value to write()

Based on the channel created data will be converted

Just we need to create the channel and internally data will be transferred corresponding to channel created.

Test.Java
Note: Everything will be same only thing is transferring form of data.

Limitations:
-->for reading char by char, it drives into performance issue
-->each time to read,it hits hard disk leading to performance issue

hence instead of reading char by char , we can read line by line by using BufferReaders 

Two types of streams
Normal streams-- reads char by char
FileInputStream
FileOutputStream
FileReader
FileWriter
Buffered Streams-- reads line by line
BufferedInputStream
BufferedOutputStream
BufferedReader
BufferedWriter

Object Creation of Buffered Streams-- Buffered streams are developed based on Normal streams, mean to say storing normal stream
values into a buffer

syntax:
File f= new File("abc.txt"); //not recommended
FileInputStream fis= new FileInputStream("f"); // not recommended
FileInputStream fis= new FileInputStream("abc.txt");
BufferedInputStream bis= new BufferedInputStream(fis); // pass fis to this

directly we can declare as
new BufferedInputStream(new FileInputStream("abc.txt"));

Note:
By using BufferedInputStream its not possible to read data line  by line



                           