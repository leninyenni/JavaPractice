Methods present in Collection Interface

 public abstract int size();
 public abstract boolean isEmpty();
 public abstract boolean contains(java.lang.Object);
 public abstract java.util.Iterator<E> iterator();
 public abstract java.lang.Object[] toArray();
 public abstract <T> T[] toArray(T[]);
 public abstract boolean add(E);
 public abstract boolean remove(java.lang.Object);
 public abstract boolean containsAll(java.util.Collection<?>);
 public abstract boolean addAll(java.util.Collection<? extends E>);
 public abstract boolean removeAll(java.util.Collection<?>);
 public boolean removeIf(java.util.function.Predicate<? super E>);
 public abstract boolean retainAll(java.util.Collection<?>);
 public abstract void clear();
 public abstract boolean equals(java.lang.Object);
 public abstract int hashCode();
 public java.util.Spliterator<E> spliterator();
 public java.util.stream.Stream<E> stream();
 public java.util.stream.Stream<E> parallelStream();
 
 
 
 Comparator Logic work:
 At line one in ComparatorExample if we are not passing comparator object then internally JVM
 will call "compareTo()" method in Comparable interface which is meant for default natural sorting order
 In this case, the output is [0, 5, 10, 15, 20]
 At line 1, if we are passing comparator object then JVM will call 'compare()' method which is meant for
 customized sorting order . In this case, output is [20, 15, 10, 5, 0]
 
 Various Possible implementations of Compare method